// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using homeCinema.Data.EF;

namespace homeCinema.Data.Migrations
{
    [DbContext(typeof(HomeCinemaDbContext))]
    partial class HomeCinemaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("homeCinema.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UniqueKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Historical fiction"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Magical realism"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Paranoid fiction"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Philosophical"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Political"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Saga"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Satire"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Social"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Speculative"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Urban"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Minions Stuart, Kevin and Bob are recruited by Scarlet Overkill, a super-villain who, alongside her inventor husband Herb, hatches a plot to take over the world.",
                            Director = "Kyle Bald",
                            GenreId = 3,
                            Image = "minions.jpg",
                            Producer = "Janet Healy",
                            Rating = (byte)3,
                            ReleaseDate = new DateTime(2015, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Minions",
                            TrailerURI = "https://www.youtube.com/watch?v=Wfql_DoHRKc",
                            Writer = "Brian Lynch"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Newlywed couple Ted and Tami-Lynn want to have a baby, but in order to qualify to be a parent, Ted will have to prove he's a person in a court of law.",
                            Director = "Seth MacFarlane",
                            GenreId = 3,
                            Image = "ted2.jpg",
                            Producer = "Jason Clark",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ted 2",
                            TrailerURI = "https://www.youtube.com/watch?v=S3AVcCggRnU",
                            Writer = "Seth MacFarlane"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Having thought that monogamy was never possible, a commitment-phobic career woman may have to face her fears when she meets a good guy.",
                            Director = "Judd Apatow",
                            GenreId = 18,
                            Image = "trainwreck.jpg",
                            Producer = "Judd Apatow",
                            Rating = (byte)5,
                            ReleaseDate = new DateTime(2015, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Trainwreck",
                            TrailerURI = "https://www.youtube.com/watch?v=2MxnhBPoIx4",
                            Writer = "Amy Schumer"
                        },
                        new
                        {
                            Id = 4,
                            Description = "After young Riley is uprooted from her Midwest life and moved to San Francisco, her emotions - Joy, Fear, Anger, Disgust and Sadness - conflict on how best to navigate a new city, house, and school.",
                            Director = "Pete Docter",
                            GenreId = 3,
                            Image = "insideout.jpg",
                            Producer = "John Lasseter",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inside Out",
                            TrailerURI = "https://www.youtube.com/watch?v=seMwpP0yeu4",
                            Writer = "Pete Docter"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Oh, an alien on the run from his own people, lands on Earth and makes friends with the adventurous Tip, who is on a quest of her own.",
                            Director = "Tim Johnson",
                            GenreId = 3,
                            Image = "home.jpg",
                            Producer = "Suzanne Buirgy",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Home",
                            TrailerURI = "https://www.youtube.com/watch?v=MyqZf8LiWvM",
                            Writer = "Tom J. Astle"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fearing the actions of a god-like Super Hero left unchecked, Gotham City's own formidable, forceful vigilante takes on Metropolis most revered, modern-day savior, while the world wrestles with what sort of hero it really needs. And with Batman and Superman at war with one another, a new threat quickly arises, putting mankind in greater danger than it's ever known before.",
                            Director = "Zack Snyder",
                            GenreId = 18,
                            Image = "batmanvssuperman.jpg",
                            Producer = "Wesley Coller",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman v Superman: Dawn of Justice",
                            TrailerURI = "https://www.youtube.com/watch?v=0WWzgGyAH6Y",
                            Writer = "Chris Terrio"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Armed with a super-suit with the astonishing ability to shrink in scale but increase in strength, cat burglar Scott Lang must embrace his inner hero and help his mentor, Dr. Hank Pym, plan and pull off a heist that will save the world.",
                            Director = "Payton Reed",
                            GenreId = 18,
                            Image = "antman.jpg",
                            Producer = "Victoria Alonso",
                            Rating = (byte)5,
                            ReleaseDate = new DateTime(2015, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ant-Man",
                            TrailerURI = "https://www.youtube.com/watch?v=1HpZevFifuo",
                            Writer = "Edgar Wright"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A new theme park is built on the original site of Jurassic Park. Everything is going well until the park's newest attraction--a genetically modified giant stealth killing machine--escapes containment and goes on a killing spree.",
                            Director = "Colin Trevorrow",
                            GenreId = 18,
                            Image = "jurassicworld.jpg",
                            Producer = "Patrick Crowley",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Jurassic World",
                            TrailerURI = "https://www.youtube.com/watch?v=RFinNxS5KN4",
                            Writer = "Rick Jaffa"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Four young outsiders teleport to an alternate and dangerous universe which alters their physical form in shocking ways. The four must learn to harness their new abilities and work together to save Earth from a former friend turned enemy.",
                            Director = "Josh Trank",
                            GenreId = 18,
                            Image = "fantasticfour.jpg",
                            Producer = "Avi Arad",
                            Rating = (byte)2,
                            ReleaseDate = new DateTime(2015, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fantastic Four",
                            TrailerURI = "https://www.youtube.com/watch?v=AAgnQdiZFsQ",
                            Writer = "Simon Kinberg"
                        },
                        new
                        {
                            Id = 10,
                            Description = "In a stark desert landscape where humanity is broken, two rebels just might be able to restore order: Max, a man of action and of few words, and Furiosa, a woman of action who is looking to make it back to her childhood homeland.",
                            Director = "George Miller",
                            GenreId = 18,
                            Image = "madmax.jpg",
                            Producer = "Bruce Berman",
                            Rating = (byte)3,
                            ReleaseDate = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mad Max: Fury Road",
                            TrailerURI = "https://www.youtube.com/watch?v=hEJnMQG9ev8",
                            Writer = "George Miller"
                        },
                        new
                        {
                            Id = 11,
                            Description = "An anthology series in which police investigations unearth the personal and professional secrets of those involved, both within and outside the law.",
                            Director = "Nic Pizzolatto",
                            GenreId = 3,
                            Image = "truedetective.jpg",
                            Producer = "Richard Brown",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "True Detective",
                            TrailerURI = "https://www.youtube.com/watch?v=TXwCoNwBSkQ",
                            Writer = "Bill Bannerman"
                        },
                        new
                        {
                            Id = 12,
                            Description = "After an automobile crash, the lives of a young couple intertwine with a much older man, as he reflects back on a past love.",
                            Director = "Nic Pizzolatto",
                            GenreId = 15,
                            Image = "thelongestride.jpg",
                            Producer = "Marty Bowen",
                            Rating = (byte)5,
                            ReleaseDate = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Longest Ride",
                            TrailerURI = "https://www.youtube.com/watch?v=FUS_Q7FsfqU",
                            Writer = "George Tillman Jr."
                        },
                        new
                        {
                            Id = 13,
                            Description = "Sheriff's Deputy Rick Grimes leads a group of survivors in a world overrun by zombies.",
                            Director = "Frank Darabont",
                            GenreId = 19,
                            Image = "thewalkingdead.jpg",
                            Producer = "Gale Anne Hurd",
                            Rating = (byte)5,
                            ReleaseDate = new DateTime(2015, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Walking Dead",
                            TrailerURI = "https://www.youtube.com/watch?v=R1v0uFms68U",
                            Writer = "David Alpert"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Boxer Billy Hope turns to trainer Tick Willis to help him get his life back on track after losing his wife in a tragic accident and his daughter to child protection services.",
                            Director = "Antoine Fuqua",
                            GenreId = 1,
                            Image = "southpaw.jpg",
                            Producer = "Todd Black",
                            Rating = (byte)4,
                            ReleaseDate = new DateTime(2015, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Southpaw",
                            TrailerURI = "https://www.youtube.com/watch?v=Mh2ebPxhoLs",
                            Writer = "Kurt Sutter"
                        },
                        new
                        {
                            Id = 15,
                            Description = "A cryptic message from Bond's past sends him on a trail to uncover a sinister organization. While M battles political forces to keep the secret service alive, Bond peels back the layers of deceit to reveal the terrible truth behind SPECTRE.",
                            Director = "Sam Mendes",
                            GenreId = 1,
                            Image = "spectre.jpg",
                            Producer = "Zakaria Alaoui",
                            Rating = (byte)5,
                            ReleaseDate = new DateTime(2015, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Specter",
                            TrailerURI = "https://www.youtube.com/watch?v=LTDaET-JweU",
                            Writer = "Ian Fleming"
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StockId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            MovieId = 1,
                            UniqueKey = new Guid("527a258c-f8aa-4372-8b5b-f418f6a0da87")
                        },
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            MovieId = 1,
                            UniqueKey = new Guid("680955fb-7e5d-4fe0-aa85-ffd760160e1a")
                        },
                        new
                        {
                            Id = 3,
                            IsAvailable = true,
                            MovieId = 1,
                            UniqueKey = new Guid("77f1a594-fe76-4614-b234-0b2b405eee86")
                        },
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            MovieId = 2,
                            UniqueKey = new Guid("fa71a826-3a85-4a4b-b271-f64db32390b8")
                        },
                        new
                        {
                            Id = 5,
                            IsAvailable = true,
                            MovieId = 2,
                            UniqueKey = new Guid("50fb6efd-ad83-4061-847e-92a05fe1a965")
                        },
                        new
                        {
                            Id = 6,
                            IsAvailable = true,
                            MovieId = 2,
                            UniqueKey = new Guid("d80507db-d514-4f74-912d-c10b23bb3a03")
                        },
                        new
                        {
                            Id = 7,
                            IsAvailable = true,
                            MovieId = 3,
                            UniqueKey = new Guid("b82dfa6f-5fec-4aa9-a104-c269398426ac")
                        },
                        new
                        {
                            Id = 8,
                            IsAvailable = true,
                            MovieId = 3,
                            UniqueKey = new Guid("447fef8c-fef9-4ca9-aaed-00ad5bbddc35")
                        },
                        new
                        {
                            Id = 9,
                            IsAvailable = true,
                            MovieId = 3,
                            UniqueKey = new Guid("4f1db240-31ff-4a5d-b429-f6f7b92859a7")
                        },
                        new
                        {
                            Id = 10,
                            IsAvailable = true,
                            MovieId = 4,
                            UniqueKey = new Guid("3f9a0488-48e4-4065-a354-5e3b599e8b4a")
                        },
                        new
                        {
                            Id = 11,
                            IsAvailable = true,
                            MovieId = 4,
                            UniqueKey = new Guid("106be3af-b434-4556-8ae0-b716fd90b255")
                        },
                        new
                        {
                            Id = 12,
                            IsAvailable = true,
                            MovieId = 4,
                            UniqueKey = new Guid("76aa4ccb-c335-426d-b005-cbe90ee114a7")
                        },
                        new
                        {
                            Id = 13,
                            IsAvailable = true,
                            MovieId = 5,
                            UniqueKey = new Guid("24f79bb4-7e18-4273-b511-35a2ee8b58fa")
                        },
                        new
                        {
                            Id = 14,
                            IsAvailable = true,
                            MovieId = 5,
                            UniqueKey = new Guid("417dfbd4-5946-4f6d-987f-912ff7bd3446")
                        },
                        new
                        {
                            Id = 15,
                            IsAvailable = true,
                            MovieId = 5,
                            UniqueKey = new Guid("79d2622c-e01e-4f7d-90c9-8df7be9d6860")
                        },
                        new
                        {
                            Id = 16,
                            IsAvailable = true,
                            MovieId = 6,
                            UniqueKey = new Guid("ea354c43-ae49-4c9b-a6ac-78efe0abbb1a")
                        },
                        new
                        {
                            Id = 17,
                            IsAvailable = true,
                            MovieId = 6,
                            UniqueKey = new Guid("916d2891-018a-458b-822a-41c913fa59e8")
                        },
                        new
                        {
                            Id = 18,
                            IsAvailable = true,
                            MovieId = 6,
                            UniqueKey = new Guid("af15b6d9-b23d-4ed2-9c5b-58705cc6d71e")
                        },
                        new
                        {
                            Id = 19,
                            IsAvailable = true,
                            MovieId = 7,
                            UniqueKey = new Guid("db38f990-2b6a-4463-8de1-80566f7e7758")
                        },
                        new
                        {
                            Id = 20,
                            IsAvailable = true,
                            MovieId = 7,
                            UniqueKey = new Guid("5e55a11e-e79d-46e8-9a02-7530df6b3cf2")
                        },
                        new
                        {
                            Id = 21,
                            IsAvailable = true,
                            MovieId = 7,
                            UniqueKey = new Guid("e75b9f86-fa08-4d06-bb1d-0b84d6be2f94")
                        },
                        new
                        {
                            Id = 22,
                            IsAvailable = true,
                            MovieId = 8,
                            UniqueKey = new Guid("6a38b176-13f5-48fe-be1e-3e60145b0da2")
                        },
                        new
                        {
                            Id = 23,
                            IsAvailable = true,
                            MovieId = 8,
                            UniqueKey = new Guid("7a0070ff-5be6-4e22-b48e-f2b158d025e4")
                        },
                        new
                        {
                            Id = 24,
                            IsAvailable = true,
                            MovieId = 8,
                            UniqueKey = new Guid("64948142-b619-4834-80a6-2c92dea6554c")
                        },
                        new
                        {
                            Id = 25,
                            IsAvailable = true,
                            MovieId = 9,
                            UniqueKey = new Guid("f3762f92-e348-4ee2-94d1-58219b9fdb76")
                        },
                        new
                        {
                            Id = 26,
                            IsAvailable = true,
                            MovieId = 9,
                            UniqueKey = new Guid("681ba4cb-634a-49ae-b269-4bb17f20c0b3")
                        },
                        new
                        {
                            Id = 27,
                            IsAvailable = true,
                            MovieId = 9,
                            UniqueKey = new Guid("e9dd7a37-0aa9-4d7a-8723-9a906d2b83cb")
                        },
                        new
                        {
                            Id = 28,
                            IsAvailable = true,
                            MovieId = 10,
                            UniqueKey = new Guid("9b52487d-3604-4af6-a758-34a16e2fc92a")
                        },
                        new
                        {
                            Id = 29,
                            IsAvailable = true,
                            MovieId = 10,
                            UniqueKey = new Guid("75fda971-9ab6-48d7-bb7d-e8f6768c3206")
                        },
                        new
                        {
                            Id = 30,
                            IsAvailable = true,
                            MovieId = 10,
                            UniqueKey = new Guid("8a0c04e2-5a9b-484f-b346-e4ec2837e4bb")
                        },
                        new
                        {
                            Id = 31,
                            IsAvailable = true,
                            MovieId = 11,
                            UniqueKey = new Guid("2c66ac82-a88e-4796-869d-9650adcf8c5e")
                        },
                        new
                        {
                            Id = 32,
                            IsAvailable = true,
                            MovieId = 11,
                            UniqueKey = new Guid("a8ad7930-0787-404e-b725-4d56e7a80e0d")
                        },
                        new
                        {
                            Id = 33,
                            IsAvailable = true,
                            MovieId = 11,
                            UniqueKey = new Guid("16e5a245-e4ef-469f-8f48-9efec75099cf")
                        },
                        new
                        {
                            Id = 34,
                            IsAvailable = true,
                            MovieId = 12,
                            UniqueKey = new Guid("f7533c80-460e-443e-82d2-7e36307014a2")
                        },
                        new
                        {
                            Id = 35,
                            IsAvailable = true,
                            MovieId = 12,
                            UniqueKey = new Guid("06059a91-bee9-4943-8b0e-c82088423477")
                        },
                        new
                        {
                            Id = 36,
                            IsAvailable = true,
                            MovieId = 12,
                            UniqueKey = new Guid("aac7d412-d02f-40f1-9fa6-57bd0fdb4c16")
                        },
                        new
                        {
                            Id = 37,
                            IsAvailable = true,
                            MovieId = 13,
                            UniqueKey = new Guid("81fd640c-f3ac-47c8-ba53-9280a89c372f")
                        },
                        new
                        {
                            Id = 38,
                            IsAvailable = true,
                            MovieId = 13,
                            UniqueKey = new Guid("bf73cce5-5d97-4e8b-9e37-998efd142780")
                        },
                        new
                        {
                            Id = 39,
                            IsAvailable = true,
                            MovieId = 13,
                            UniqueKey = new Guid("56f73f03-d933-4bba-b15b-20077838b8c8")
                        },
                        new
                        {
                            Id = 40,
                            IsAvailable = true,
                            MovieId = 14,
                            UniqueKey = new Guid("866f6974-68fb-4cd5-9513-f46ee7018a88")
                        },
                        new
                        {
                            Id = 41,
                            IsAvailable = true,
                            MovieId = 14,
                            UniqueKey = new Guid("d31846f5-6a10-46ab-b4b2-d814199877e7")
                        },
                        new
                        {
                            Id = 42,
                            IsAvailable = true,
                            MovieId = 14,
                            UniqueKey = new Guid("3c3406a7-90e5-46cf-b141-f1cb0be3e00c")
                        },
                        new
                        {
                            Id = 43,
                            IsAvailable = true,
                            MovieId = 15,
                            UniqueKey = new Guid("7aa618a5-3e49-4f1c-85af-0cf572a62c81")
                        },
                        new
                        {
                            Id = 44,
                            IsAvailable = true,
                            MovieId = 15,
                            UniqueKey = new Guid("e45b8347-7ef0-4d66-979c-fbb818dd440c")
                        },
                        new
                        {
                            Id = 45,
                            IsAvailable = true,
                            MovieId = 15,
                            UniqueKey = new Guid("a9e8ecb3-5e15-45f3-bea9-55ae07e4a9f7")
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 4, 22, 16, 12, 19, 768, DateTimeKind.Local).AddTicks(5307),
                            Email = "prohotvulcan@gmail.com",
                            HashedPassword = "XwAQoiq84p1RUzhAyPfaMDKVgSwnn80NCtsE8dNv3XI=",
                            IsLocked = false,
                            Salt = "mNKLRbEFCH8y1xIyTXP4qA==",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Movie", b =>
                {
                    b.HasOne("homeCinema.Data.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Rental", b =>
                {
                    b.HasOne("homeCinema.Data.Entities.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("homeCinema.Data.Entities.Stock", "Stock")
                        .WithMany("Rentals")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homeCinema.Data.Entities.Stock", b =>
                {
                    b.HasOne("homeCinema.Data.Entities.Movie", "Movie")
                        .WithMany("Stocks")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homeCinema.Data.Entities.UserRole", b =>
                {
                    b.HasOne("homeCinema.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("homeCinema.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
